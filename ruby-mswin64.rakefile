rule '.tar.gz' do |t|
  fetch $conf["tarballs"][t.name]["url"], t.name
end

rule '.unpack' => '.tar.gz' do |t|
  tar_xfz t.prerequisites.first, 1,
          File.basename(t.prerequisites.first, '.tar.gz')
  touch t.name
end

# file 'ruby.unpack' => 'ruby.tar.gz' do |t|
#   tar_xfz t.prerequisites.first, 0, "1"
#   touch t.name
# end


# compile vcpkg.exe
file 'vcpkg.configure' => 'vcpkg.unpack' do |t|
  cd 'vcpkg' do
    sh 'powershell', '-NoProfile', '-ExecutionPolicy', 'Bypass',
       File.join('scripts', 'bootstrap.ps1'), '-disableMetrics'
  end
  touch t.name
end

# compile all the deps
file 'vcpkg.deps' => 'vcpkg.configure' do |t|
  cd 'vcpkg' do
    sh './vcpkg', '--triplet', 'x64-windows', 'install',
       'openssl', 'readline', 'zlib'
  end
  touch t.name
end

# compile ruby
file 'ruby.build' => ['vcpkg.deps', 'ruby.unpack'] do |t|
  ENV['INCLUDE'] += ";"+wj(__dir__, 'vcpkg', 'installed', 'x64-windows', 'include')
  ENV['LIB'] += ";"+wj(__dir__, 'vcpkg', 'installed', 'x64-windows', 'lib')
  ENV['PATH'] += ";"+wj(__dir__, 'vcpkg', 'installed', 'x64-windows', 'bin')

  cd 'ruby' do
    sh 'win32/configure.bat',
       '--prefix='+wj(__dir__, "_out/ruby-#{$conf["ver"]}")
    sh "nmake"
    sh "nmake install"
    cp_r Dir.glob(File.join __dir__, 'vcpkg/installed/x64-windows/bin/*.dll'),
         File.join(__dir__, "_out/ruby-#{$conf["ver"]}/bin/")
  end
  touch t.name
end



require 'open-uri'
require 'rubygems/package'
require 'digest/sha1'
require 'yaml'

$conf = YAML.load_file(ENV['conf'] || File.join(__dir__, 'conf.yaml'))

# openssl for windows doesn't use the windows certificate store!
#
# wget https://curl.haxx.se/ca/cacert.pem
ENV['SSL_CERT_FILE'] = File.join __dir__, 'cacert.pem'

def fetch from, to
  puts "fetch #{from} to `#{to}`" if verbose
  URI.open(from) do |io|
    File.open(to, 'wb') { |f| f.write io.read }
  end
  if Digest::SHA1.hexdigest(File.binread to) != $conf["tarballs"][to]["sha1"]
    fail "sha1 doesn't match"
  end
end

def tar_xfz archive, strip_componenets, to
  puts "unpack #{archive} to `#{to}`" if verbose
  File.open(archive, 'rb') do |file|
    Zlib::GzipReader.wrap(file) do |gz|
      Gem::Package::TarReader.new(gz) do |tar|
        tar.each do |entry|
          next if entry.directory?

          path = entry.full_name.split(File::SEPARATOR)[strip_componenets..-1]
          if path.size > 0
            path = File.join to, path
            FileUtils.mkdir_p File.dirname path
            File.open(path, 'wb') { |f| f.write entry.read }
            File.utime entry.header.mtime, entry.header.mtime, path
          end
        end
      end
    end
  end
end


def wj *rest; rest.map {|v| v.split(File::SEPARATOR) }.flatten.join '\\'; end
