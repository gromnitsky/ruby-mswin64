require 'yaml'

$conf = YAML.load_file(ENV['conf'] || File.join(__dir__, 'conf.yaml'))
def out f; File.join (ENV['out'] || "_out/ruby-#{$conf["ver"]}"), f; end
install_prefix = out "ruby-#{$conf["ver"]}"

rule '.tar.gz' do |t|
  fetch $conf["tarballs"][File.basename t.name]["url"], t.name
end

rule '.unpack' => '.tar.gz' do |t|
  tar_xfz t.prerequisites.first, 1, t.prerequisites.first.sub(/.tar.gz$/, '')
  touch t.name
end

# compile vcpkg.exe
file out('vcpkg.configure') => out('vcpkg.unpack') do |t|
  cd out('vcpkg') do
    sh 'powershell', '-NoProfile', '-ExecutionPolicy', 'Bypass',
       File.join('scripts', 'bootstrap.ps1'), '-disableMetrics'
  end
  touch t.name
end

# compile all the deps
file out('vcpkg.deps') => out('vcpkg.configure') do |t|
  cd out('vcpkg') do
    sh './vcpkg', '--triplet', 'x64-windows', 'install',
       'openssl', 'readline', 'zlib'
  end
  touch t.name
end

# compile ruby
file out('ruby.build') => [out('vcpkg.deps'), out('ruby.unpack')] do |t|
  ENV['INCLUDE'] += ";"+wj(out 'vcpkg/installed/x64-windows/include')
  ENV['LIB'] += ";"+wj(out 'vcpkg/installed/x64-windows/lib')
  ENV['PATH'] += ";"+wj(out 'vcpkg/installed/x64-windows/bin')
  prefix = wj install_prefix

  cd out('ruby') do
    sh 'win32/configure.bat',
       '--prefix='+prefix
    sh "nmake"
    sh "nmake install"
  end
  cp_r Dir.glob(File.join out('vcpkg/installed/x64-windows/bin'), '*.dll'),
       File.join(prefix, 'bin/')
  touch t.name
end

zip = install_prefix + "-#{$conf["release"]}.zip"
file zip => out('ruby.build') do |t|
  rm_f t.name
  sh 'powershell', '-NoProfile', '-ExecutionPolicy', 'Bypass',
     '-Command', 'Compress-Archive', '-Path', install_prefix,
     '-DestinationPath', t.name
end

task :default => zip



require 'open-uri'
require 'rubygems/package'
require 'digest/sha1'

# openssl for windows doesn't use the windows certificate store!
#
# wget https://curl.haxx.se/ca/cacert.pem
ENV['SSL_CERT_FILE'] = File.join __dir__, 'cacert.pem'

def fetch from, to
  puts "fetch #{from} to `#{to}`" if verbose
  URI.open(from) do |io|
    mkdir_p File.dirname to
    File.open(to, 'wb') { |f| f.write io.read }
  end
  if Digest::SHA1.hexdigest(File.binread to) != $conf["tarballs"][File.basename to]["sha1"]
    fail "sha1 doesn't match"
  end
end

def tar_xfz archive, strip_componenets, to
  puts "unpack #{archive} to `#{to}`" if verbose
  File.open(archive, 'rb') do |file|
    Zlib::GzipReader.wrap(file) do |gz|
      Gem::Package::TarReader.new(gz) do |tar|
        tar.each do |entry|
          next if entry.directory?

          path = entry.full_name.split(File::SEPARATOR)[strip_componenets..-1]
          if path.size > 0
            path = File.join to, path
            FileUtils.mkdir_p File.dirname path
            File.open(path, 'wb') { |f| f.write entry.read }
            File.utime entry.header.mtime, entry.header.mtime, path
          end
        end
      end
    end
  end
end


def wj *rest; File.absolute_path(File.join(*rest)).split('/').join '\\'; end
